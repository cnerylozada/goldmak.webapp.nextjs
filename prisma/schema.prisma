generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  organizations Organization[]

  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model Organization {
  id            String                     @id @default(cuid())
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  user          User                       @relation(fields: [userId], references: [id])
  userId        String
  products      Product[]
  resourceFiles OrganizationResourceFile[]
  name          String
  description   String
}

model OrganizationResourceFile {
  id             String       @id @default(cuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  bucketKey      String
}

model Product {
  id             String                @id @default(cuid())
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  organization   Organization          @relation(fields: [organizationId], references: [id])
  organizationId String
  resourceFiles  ProductResourceFile[]
  name           String
  stock          Int
  price          Float
  disabled       Boolean               @default(false)
  description    String
}

model ProductResourceFile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  bucketKey String
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
